JuriAI - Guia de Deploy (Render + Vercel + Supabase)
===================================================

Resumo do stack
- Backend: Render (Node/Express) em backend/
- Frontend: Vercel (Vite/React)
- Banco e Storage: Supabase (Postgres + Storage)

Pré-requisitos
- Conta no Supabase, Render e Vercel
- Repositório no GitHub/GitLab/Bitbucket com este projeto

1) Supabase (DB + Storage)
--------------------------
1.1 Crie um projeto no Supabase: https://supabase.com
1.2 Anote:
    - SUPABASE_URL
    - SUPABASE_SERVICE_ROLE_KEY (servidor) e ANON_KEY (frontend, opcional)
1.3 Crie um bucket de Storage:
    - Nome: documents
    - Público: habilitar (ou use políticas RLS e URLs assinadas)
1.4 (Opcional) Criar tabelas do banco:
    - Use o script PostgreSQL recomendado em backend-config.md

2) Backend na Render (Node/Express)
-----------------------------------
2.1 Conecte o repositório na Render: https://render.com
2.2 A Render vai detectar o arquivo render.yaml
    - Service type: Web
    - rootDir: backend
    - Build: npm install
    - Start: npm start
    - Plano: free (para demo)
2.3 Defina as variáveis de ambiente no painel do serviço:
    - SUPABASE_URL = (do seu projeto Supabase)
    - SUPABASE_SERVICE_ROLE_KEY = (chave service role do Supabase)
    - SUPABASE_BUCKET = documents
    - MAX_FILE_SIZE = 10485760 (10MB, opcional)
    - JWT_SECRET = (um segredo forte)
    - OPENROUTER_API_KEY = (se for usar no backend; opcional)
2.4 Deploy e teste a saúde da API:
    - Abra: https://SEU_BACKEND.onrender.com/api/health
    - Resposta esperada: { ok: true, time: ... }
2.5 Teste upload (Postman/cURL):
    - POST https://SEU_BACKEND.onrender.com/api/documents/upload (form-data: file=<seu arquivo>)
    - Deve retornar JSON com url público do arquivo no Supabase Storage.

3) Frontend na Vercel (Vite)
----------------------------
3.1 Conecte o repositório na Vercel: https://vercel.com
3.2 Configuração de build:
    - Build Command: npm run build
    - Output Directory: dist/
3.3 Variáveis de ambiente (Project Settings -> Environment Variables):
    - VITE_API_BASE_URL = https://SEU_BACKEND.onrender.com
    - VITE_OPENROUTER_API_KEY = (se usar chat IA no frontend)
3.4 Deploy e teste o site.

4) .env local (opcional para desenvolvimento)
---------------------------------------------
4.1 Copie .env.example para .env
4.2 Preencha:
    - VITE_API_BASE_URL (ex.: http://localhost:3001 ou URL Render)
    - SUPABASE_URL
    - SUPABASE_SERVICE_ROLE_KEY (ou ANON para testes simples)
    - SUPABASE_BUCKET=documents
    - JWT_SECRET
    - VITE_OPENROUTER_API_KEY (se for usar chat IA)

5) Ajustes no código (se necessário)
-----------------------------------
- As chamadas de API no frontend devem usar import.meta.env.VITE_API_BASE_URL
- Upload no frontend deve apontar para POST `${VITE_API_BASE_URL}/api/documents/upload`
- Se habilitar autenticação: usar JWT (Authorization: Bearer <token>)

6) Dicas para plano free
------------------------
- Render (free) hiberna: primeiro acesso pode demorar 10–30s
- Evite salvar arquivos no disco da Render em free; use o Supabase Storage
- Limite de recursos: mantenha logs enxutos

7) Problemas comuns
-------------------
- 404/timeout no backend: ver logs na Render
- CORS: libere a origem do frontend (Vercel) no backend, se necessário
- Supabase Storage sem URL pública: verifique se o bucket é público ou use URL assinada
- Variáveis .env ausentes: confira em Vercel (frontend) e Render (backend)

URLs úteis
---------
- Render: https://render.com
- Vercel: https://vercel.com
- Supabase: https://supabase.com

Pronto! Siga os passos acima e você terá o app publicado (frontend na Vercel, backend na Render e arquivos no Supabase Storage). Se quiser, posso implementar as rotas de autenticação, casos, documentos (CRUD), calendário e notificações usando o Supabase como banco.
